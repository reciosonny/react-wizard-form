{"version":3,"sources":["Helpers/stateHelper.js","SharedComponents/FormInput.js","SharedComponents/BackNextBtn.js","SharedComponents/FormInputs.js","Models/ContactFormPropsModel.js","ContactForm.js","Models/AddressFormPropsModel.js","AddressForm.js","Models/CommentFormPropsModel.js","SharedComponents/ReviewFormStyle.js","CommentForm.js","FormEditModal.js","ReviewForm.js","ThankYouForm.js","App.js","serviceWorker.js","index.js"],"names":["setState","instance","props","prop","hasOwnProperty","element","Object","defineProperty","FormInput","state","addValidationError","_this2","this","_this$props","propLabel","propName","active","formVal","propValidate","displayValidation","invalidValidationInputStyle","react_default","a","createElement","Fragment","className","type","concat","value","onChange","e","val","target","onValidation","fieldName","validated","length","style","display","Component","BackNextBtn","fieldValidations","renderBackBtn","step","_this","onClick","onPrevStep","onNextStep","formInputs","result","map","x","formInput","find","y","mapFieldValidations","some","onNextStepFieldValidation","renderNextBtn","formProps","filter","keys","validate","mapFormProps","textAlign","FormInputs","_ref","_this$state","_ref3","formInputsResult","_ref2","mapFormInputs","renderFormInputs","_this$state2","forms","fieldValidation","label","createFormPropsWithValidations","idx","SharedComponents_FormInput","key","onSubmit","preventDefault","newForms","assign","prevProps","form","formProp","SharedComponents_BackNextBtn","React","ContactFormPropsModel","firstName","lastName","emailAddress","phoneNumber","ContactForm","stateHelper","contact","SharedComponents_FormInputs","AddressFormPropsModel","street1","street2","city","zip","AddressForm","address","CommentFormPropsModel","selectionVal","selectionLbl","commentBox","ReviewFormStyle","FormEditModal","lib","trigger","fixedFooter","editForm","mapForm","formData","propForm","columnName","cFormProp","SharedComponents_ReviewFormStyle","ReviewForm","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","renderCommentForm","commentForm","labels","contactForm","addressForm","renderContactForm","renderAddressForm","editContactForm","src_ContactForm","onChangeContactForm","editAddressForm","src_AddressForm","onChangeAddressForm","src_FormEditModal","ThankYouForm","BreadCrumbs","breadcrumbs","activeClass","href","name","mapBreadcrumbs","currIndex","App","disableControl","breadcrumbsStep","onChangeCommentForm","newStep","console","log","renderForm","src_ReviewForm","src_ThankYouForm","App_BreadCrumbs","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42aa23d9.chunk.js","sourcesContent":["\r\nexport function setState(instance, props) {\r\n    for (const prop in props) {\r\n        if (props.hasOwnProperty(prop)) {\r\n            const element = props[prop];\r\n            instance.setState({ [prop]: element });\r\n        }\r\n    }\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\n\r\nclass FormInput extends Component {\r\n\r\n    state = {addValidationError: false};\r\n\r\n    componentDidMount() {\r\n        \r\n    }\r\n\r\n    render() {\r\n        const { propLabel, propName, active, formVal, propValidate, addValidationError } = this.props;\r\n        const displayValidation = addValidationError ? \"inline\" : \"none\";\r\n        const invalidValidationInputStyle = addValidationError ? \"invalid\" : \"\";\r\n\r\n        return (\r\n            <>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field col s12\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className={`form-control ${invalidValidationInputStyle}`}\r\n                            value={formVal}\r\n                            onChange={e => {\r\n                                const val = e.target.value;\r\n                                this.props.onChange(propName, val);\r\n                                if (propValidate) {\r\n                                    // this.setState({ validate: val.length > 0 });\r\n                                    this.props.onValidation({ fieldName:propName, validated: val.length > 0});\r\n                                }\r\n                            }}\r\n                        />{\" \"}\r\n                        \r\n                        {/**add class `invalid` for validation */}\r\n                        <label className={active}>{propLabel}</label>\r\n                        <span className=\"red-text\" style={{display: displayValidation}}>Required</span>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FormInput;\r\n","import React, { Component } from \"react\";\r\n\r\n\r\n// TODO: I think this needed to be put inside FormInputs component\r\nclass BackNextBtn extends Component {\r\n    state = { fieldValidations: [] };\r\n\r\n    //TODO: we're going to need `formProps` as a property to be passed on this component to process it and set formValidationErrors flag.\r\n    componentDidMount() {\r\n        const { formProps } = this.props;\r\n        const result = mapFormProps(formProps);\r\n\r\n        this.setState({ fieldValidations: result });\r\n    }\r\n\r\n    renderBackBtn = () => {\r\n        const { step } = this.props;\r\n        if (step > 1 & step < 4) {\r\n            return (\r\n                <button\r\n                    className=\"btn btn-primary\"\r\n                    onClick={this.props.onPrevStep}\r\n                >\r\n                    Previous\r\n                </button>\r\n            );\r\n        }\r\n\r\n        return \"\";\r\n    };\r\n\r\n    // TODO: refactor this one out\r\n    onNextStep = () => {\r\n        const { formInputs } = this.props;\r\n        const result = mapFieldValidations(this.state.fieldValidations, formInputs);\r\n\r\n        this.setState({ fieldValidations: result, validated: !result.some(x => x.validated === false) }, () => {\r\n            if (this.state.validated) {\r\n                this.props.onNextStep();\r\n            } else {\r\n                this.props.onNextStepFieldValidation(result);\r\n            }\r\n        });\r\n    }\r\n\r\n    renderNextBtn = () => {\r\n        const { step } = this.props;\r\n\r\n        if (step < 4) {\r\n            return (\r\n                <button className=\"btn btn-primary\" onClick={this.onNextStep}>\r\n                    Next\r\n                </button>\r\n            );\r\n        } else if (step === 4) {\r\n            return <button className=\"btn btn-primary\" onClick={this.onNextStep}>Submit</button>;\r\n        }\r\n\r\n        return \"\";\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col s4\">{this.renderBackBtn()}</div>\r\n                <div\r\n                    className=\"col s8 offset-by-4\"\r\n                    style={{ textAlign: \"right\" }}\r\n                >\r\n                    {this.renderNextBtn()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction mapFormProps(formProps) {\r\n    return formProps\r\n            .filter(x => x[Object.keys(x)[0]].validate === true)\r\n            .map(x => {\r\n                const propName = Object.keys(x)[0];\r\n\r\n                return {\r\n                    fieldName: propName,\r\n                    validated: false,\r\n                    addValidationError: false\r\n                }; //set validated to false first as the input is not filled by user yet...\r\n            });\r\n}\r\n\r\nfunction mapFieldValidations(fieldValidations, formInputs) {\r\n    return fieldValidations.map(x => {\r\n        const formInput = formInputs.find(y => y.fieldName === x.fieldName);\r\n        if (formInput) {\r\n            x.addValidationError = !formInput.validated;\r\n            x.validated = formInput.validated;\r\n        } else {\r\n            x.addValidationError = true;\r\n            x.validated = false;\r\n        }\r\n\r\n        return x;\r\n    });\r\n}\r\n\r\n\r\nexport default BackNextBtn;","import React from 'react';\r\nimport FormInput from './FormInput';\r\nimport BackNextBtn from './BackNextBtn';\r\n\r\n// We do most of the dirty work here including form validations and input...\r\nclass FormInputs extends React.Component {\r\n\r\n    state = { validated: false, fieldValidations: [], formInputs: [] };\r\n\r\n    componentDidMount() {\r\n        this.setState({ forms: this.props.forms }); //to change the value of forms\r\n    }\r\n\r\n    // note: we use this instead to get updates from the top hierarchy of forms value saved in state. componentDidMount() won't work\r\n    componentDidUpdate(prevProps) {\r\n        // Typical usage (don't forget to compare props):\r\n        if (this.props.forms !== prevProps.forms) {\r\n\r\n            const result = formsToValidate(this.props.forms, this.props.formProps);\r\n            const formInputs = result.map(x => {\r\n                const val = this.props.forms[x];\r\n                return {\r\n                    fieldName: x,\r\n                    validated: val.length > 0,\r\n                    addValidationError: !val.length > 0\r\n                }\r\n            });\r\n\r\n            this.setState({ forms: this.props.forms, formInputs }); //to change the value of forms\r\n        }\r\n    }\r\n\r\n    //note: won't take effect until you submit the next button. Afterwards, each time you typed in input field, the textbox will turn red if not validated \"on change\"\r\n    onValidation = ({ fieldName, validated }) => {\r\n        const { fieldValidations, formInputs } = this.state;\r\n\r\n        const result = mapFieldValidations({ fieldValidations, fieldName, validated });\r\n        const formInputsResult = mapFormInputs({ formInputs, fieldName, validated });\r\n\r\n        this.setState({ fieldValidations: result, validated: !result.some(x => x.validated === false), formInputs: formInputsResult });\r\n    }\r\n\r\n    renderFormInputs = () => {\r\n        const { fieldValidations, forms } = this.state;\r\n\r\n        if(!forms) return;\r\n\r\n        const formPropsWithValidations = createFormPropsWithValidations(fieldValidations, forms, forms.formProps);\r\n        const result = formPropsWithValidations.map((x, idx) => {\r\n            return <FormInput \r\n                        key={idx}\r\n                        formVal={x.formVal}\r\n                        active={x.active}\r\n                        propName={x.propName}\r\n                        propLabel={x.propLabel}\r\n                        propValidate={x.propValidate}\r\n                        onChange={this.onChange}\r\n                        onValidation={this.onValidation}\r\n                        addValidationError={x.addValidationError}\r\n                    />;\r\n        });\r\n        return result;\r\n    }\r\n\r\n    onNextStepFieldValidation = (result) => {\r\n        this.setState({ fieldValidations: result, validated: !result.some(x => x.validated === false) });\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    onChange = (propName, value) => {\r\n        let newForms = Object.assign({}, this.state.forms); //use a new object instead and mutate the values\r\n        // this.state.forms[propName] = value; //using this method is a mutation in state\r\n        newForms[propName] = value;\r\n\r\n        this.setState({ forms: newForms }, () => this.props.onChange(this.state.forms));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className=\"div-form-fields\">\r\n                        <div className=\"form-intro\">\r\n                            {this.renderFormInputs()}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <BackNextBtn \r\n                        formProps={this.props.formProps} \r\n                        forms={this.state.forms}\r\n                        step={this.props.step} \r\n                        onNextStepFieldValidation={this.onNextStepFieldValidation}\r\n                        onNextStep={this.props.onNextStep}\r\n                        onPrevStep={this.props.onPrevStep}\r\n                        fieldValidations={this.state.fieldValidations}\r\n                        formInputs={this.state.formInputs}\r\n                    />\r\n                </form>\r\n            </>\r\n        );\r\n    }\r\n};\r\n\r\nfunction formsToValidate(forms, formProps) {\r\n    return Object.keys(forms).filter(form => {\r\n        const formProp = formProps.find(x => Object.keys(x)[0] === form);\r\n        return form !== \"formProps\" && (formProp ? formProp[form].validate : false);\r\n    });\r\n}\r\n\r\nfunction createFormPropsWithValidations(fieldValidations, forms, formProps) {\r\n    return formProps.map(x => {\r\n        const propName = Object.keys(x)[0];\r\n        const formVal = forms[propName];\r\n        const fieldValidation = fieldValidations.find(x => x.fieldName === propName);\r\n\r\n        return {\r\n            propName,\r\n            propLabel: x[propName].label,\r\n            propValidate: x[propName].validate,\r\n            formVal,\r\n            active: formVal ? \"active\" : \"\",\r\n            fieldValidation,\r\n            addValidationError: fieldValidation ? fieldValidation.addValidationError : false\r\n        }\r\n    });\r\n}\r\n\r\nfunction mapFormInputs({ formInputs, fieldName, validated }) {\r\n\r\n    return !formInputs.some(x => x.fieldName === fieldName) ? \r\n        formInputs.concat([{ fieldName, validated }]) : \r\n        formInputs.map(x => {\r\n            if (x.fieldName === fieldName) {\r\n                x.validated = validated;\r\n            }\r\n            return x;\r\n        });    \r\n}\r\n\r\nfunction mapFieldValidations ({ fieldValidations, fieldName, validated }) {\r\n    return fieldValidations.map(x => {\r\n        if (x.fieldName === fieldName) {\r\n            x.validated = validated;\r\n            x.addValidationError = !validated;\r\n        }\r\n        return x;\r\n    });\r\n}\r\n\r\nexport default FormInputs;","\r\n\r\nexport default {\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    emailAddress: \"\",\r\n    phoneNumber: \"\",\r\n    formProps: [\r\n        { firstName: {label: \"First Name\", validate: true} },\r\n        { lastName: {label: \"Last Name\", validate: true} },\r\n        { emailAddress: {label: \"Email Address\", validate: false} },\r\n        { phoneNumber: {label: \"Phone Number\", validate: false} }\r\n    ]\r\n}","import React, { Component } from \"react\";\r\n\r\nimport * as stateHelper from './Helpers/stateHelper';\r\n\r\nimport FormInputs from \"./SharedComponents/FormInputs\";\r\nimport ContactFormPropsModel from './Models/ContactFormPropsModel';\r\n\r\n\r\nclass ContactForm extends Component {\r\n    state = {...ContactFormPropsModel, fieldValidations: []};\r\n\r\n    componentDidMount() {\r\n        stateHelper.setState(this, this.props.contact);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <h4>Contact Form</h4>\r\n\r\n                <FormInputs \r\n                    formProps={this.state.formProps} \r\n                    forms={this.state} \r\n                    step={this.props.step}\r\n                    onNextStep={this.props.onNextStep}\r\n                    onPrevStep={this.props.onPrevStep}\r\n                    onChange={this.props.onChange}\r\n                />\r\n\r\n                <br />\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContactForm;","export default {\r\n    street1: \"\",\r\n    street2: \"\",\r\n    city: \"\",\r\n    state: \"\",\r\n    zip: \"\",\r\n    formProps: [\r\n        { street1: {label: \"Street 1\", validate: true} },\r\n        { street2: {label: \"Street 2\", validate: false} },\r\n        { city: {label: \"City\", validate: false} },\r\n        { state: {label: \"State\", validate: false} },\r\n        { zip: {label: \"Zip\", validate: false} },\r\n    ]\r\n}","import React, { Component } from \"react\";\r\nimport FormInputs from \"./SharedComponents/FormInputs\";\r\n\r\nimport * as stateHelper from './Helpers/stateHelper';\r\nimport AddressFormPropsModel from './Models/AddressFormPropsModel';\r\n\r\nclass AddressForm extends Component {\r\n    state = {...AddressFormPropsModel};\r\n\r\n    componentDidMount() {\r\n        stateHelper.setState(this, this.props.address);\r\n    }\r\n\r\n    onChange = (propName, value) => {\r\n        this.setState({ [propName]: value }, () => this.props.onChange(this.state));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <h4>Address Form</h4>\r\n                <FormInputs \r\n                    formProps={this.state.formProps} \r\n                    forms={this.state} \r\n                    step={this.props.step}\r\n                    onNextStep={this.props.onNextStep}\r\n                    onPrevStep={this.props.onPrevStep}\r\n                    onChange={this.props.onChange}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddressForm;\r\n","export default { selectionVal: \"\", selectionLbl: \"\", commentBox: \"\" };","import React from 'react';\r\n\r\nconst ReviewFormStyle = ({ label, value }) => {\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"s12\">\r\n                <label><h5>{label}</h5></label>\r\n            </div>\r\n            <div className=\"s12\">\r\n                <h6><strong>{value}</strong></h6>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default ReviewFormStyle;","import React, { Component } from \"react\";\r\nimport * as stateHelper from './Helpers/stateHelper';\r\n\r\nimport CommentFormPropsModel from './Models/CommentFormPropsModel';\r\nimport FormInputs from \"./SharedComponents/FormInputs\";\r\n\r\n\r\nclass CommentForm extends Component {\r\n\r\n    state = CommentFormPropsModel;\r\n\r\n    componentDidMount() {        \r\n        stateHelper.setState(this, this.props.comment);\r\n    }\r\n\r\n    onChangeSelection = (e) => {\r\n        var index = e.nativeEvent.target.selectedIndex;\r\n        const selectionLbl = e.nativeEvent.target[index].text;\r\n\r\n        this.setState(\r\n            { selectionVal: e.target.value, selectionLbl },\r\n            () => this.props.onChange(this.state)\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const active = this.state.commentBox ? \"active\" : \"\";\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"input-field col s12\">\r\n                    <select \r\n                        className=\"browser-default\" \r\n                        onChange={this.onChangeSelection}\r\n                        value={this.state.selectionVal}\r\n                    >\r\n                        <option value=\"\" disabled selected>\r\n                            Choose your option\r\n                        </option>\r\n                        <option value=\"1\">Staff Feedback</option>\r\n                        <option value=\"2\">Checkout Feedback</option>\r\n                        <option value=\"3\">Product Feedback</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"input-field col s12\">\r\n                        <textarea \r\n                            className=\"materialize-textarea\"\r\n                            onChange={(e) => this.setState({ commentBox: e.target.value }, () => this.props.onChange(this.state))}\r\n                            value={this.state.commentBox}\r\n                        />\r\n                        <label className={active}>Comment Box</label>\r\n                    </div>\r\n                </div>\r\n                <br />\r\n\r\n                {/* <FormInputs \r\n                    formProps={this.state.formProps} \r\n                    forms={this.state} \r\n                    step={this.props.step}\r\n                    onNextStep={this.props.onNextStep}\r\n                    onPrevStep={this.props.onPrevStep}\r\n                    onChange={this.props.onChange}\r\n                /> */}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CommentForm;\r\n","import React, { Component } from \"react\";\r\nimport { Modal, Button } from \"react-materialize\";\r\n\r\n\r\nclass FormEditModal extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Modal trigger={<Button>Edit</Button>} className=\"form-modal-edit\" fixedFooter>\r\n                    {this.props.editForm}\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FormEditModal;","import React, { Component } from 'react';\r\nimport ReviewFormStyle from './SharedComponents/ReviewFormStyle';\r\nimport FormEditModal from './FormEditModal';\r\nimport ContactForm from './ContactForm';\r\nimport AddressForm from './AddressForm';\r\nimport CommentForm from './CommentForm';\r\n\r\n\r\nclass ReviewForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);        \r\n    }\r\n\r\n    renderCommentForm = () => {\r\n        const { commentForm } = this.props;\r\n        const labels = [\"Feedback Type\", \"Comment Box\"];\r\n\r\n        return Object.keys(commentForm).filter(x => x !== \"selectionVal\").map((prop, idx) => \r\n            <ReviewFormStyle label={labels[idx]} value={commentForm[prop]} />\r\n        )\r\n    }\r\n\r\n    \r\n    render() {\r\n        const { contactForm, addressForm, commentForm } = this.props;\r\n        const renderContactForm = mapForm(contactForm);\r\n        const renderAddressForm = mapForm(addressForm);\r\n\r\n        const editContactForm = <ContactForm onChange={this.props.onChangeContactForm} contact={contactForm} />\r\n        const editAddressForm = <AddressForm onChange={this.props.onChangeAddressForm} address={addressForm} />\r\n        // const editCommentForm = <CommentForm onChange={this.props.onChangeCommentForm} comment={commentForm} />\r\n\r\n        return (\r\n            <div>\r\n                <h3>Review form</h3>\r\n                <br/><br/>\r\n\r\n                <h4>Contacts</h4>\r\n                <hr/>\r\n                {renderContactForm}\r\n                <FormEditModal editForm={editContactForm} />\r\n\r\n                <h4>Address</h4>\r\n                <hr/>\r\n                {renderAddressForm}\r\n                <FormEditModal editForm={editAddressForm} />\r\n\r\n\r\n                {/* <h4>Comments</h4>\r\n                <hr/>\r\n                {this.renderCommentForm()}\r\n                <FormEditModal editForm={editCommentForm} /> */}\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col s4\">\r\n                        <button className=\"btn btn-primary\">\r\n                            Previous\r\n                        </button>\r\n                    </div>\r\n                    <div\r\n                        className=\"col s8 offset-by-4\"\r\n                        style={{ textAlign: \"right\" }}\r\n                    >\r\n                        <button className=\"btn btn-primary\" onClick={this.props.onNextStep}>\r\n                            Submit\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapForm(formData) {\r\n    const { formProps } = formData;\r\n\r\n    const result = Object.keys(formData).filter(propForm => propForm !== \"formProps\" && propForm !== \"fieldValidations\").map((x) => {\r\n        const columnName = formProps.find(cFormProp => Object.keys(cFormProp)[0] === x)[x];\r\n\r\n        return <ReviewFormStyle \r\n            label={columnName.label} \r\n            value={formData[x]} \r\n        />\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\n\r\nexport default ReviewForm;","import React from 'react';\r\n\r\nconst ThankYouForm = () => {\r\n    return (\r\n        <div>\r\n            <h3>Thank You!</h3>\r\n            <div className=\"row\">\r\n                <div className=\"s12\">\r\n                    Thank you for filling up our form. We'll get back to you shortly!\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ThankYouForm;","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport \"materialize-css/dist/css/materialize.css\";\nimport \"materialize-css/dist/js/materialize.js\";\n\nimport ContactForm from \"./ContactForm\";\nimport AddressForm from \"./AddressForm\";\nimport CommentForm from \"./CommentForm\";\nimport ReviewForm from \"./ReviewForm\";\nimport ThankYouForm from \"./ThankYouForm\";\n\nimport ContactFormPropsModel from \"./Models/ContactFormPropsModel\";\nimport AddressFormPropsModel from \"./Models/AddressFormPropsModel\";\nimport CommentFormPropsModel from \"./Models/CommentFormPropsModel\";\n\nconst BreadCrumbs = ({ breadcrumbs }) => {\n    return <div className=\"breadcrumb\">\n        {breadcrumbs.map((x, idx) => {\n            const activeClass = x.active ? \"breadcrumb__step--active\" : \"\";\n            return (\n                <a className={`breadcrumb__step ${activeClass}`} href=\"javascript:void(0)\">\n                    {x.name}\n                </a>\n            );\n        })}\n    </div>;\n};\n\nclass App extends Component {\n    state = {\n        step: 1,\n        contactForm: ContactFormPropsModel,\n        addressForm: AddressFormPropsModel,\n        commentForm: CommentFormPropsModel,\n        disableControl: true,\n        breadcrumbsStep: [\n            { name: \"Contact Form\", active: true },\n            { name: \"Address Form\", active: false },\n            { name: \"Review\", active: false },\n            { name: \"Success\", active: false }\n        ]\n    };\n\n    onChangeContactForm = state => {\n        this.setState({ contactForm: state });\n    };\n\n    onChangeAddressForm = state => {\n        this.setState({ addressForm: state });\n    };\n\n    onChangeCommentForm = state => {\n        this.setState({ commentForm: state });\n    };\n\n    onNextStep = () => {\n        const { step } = this.state;\n        const newStep = step+1;\n\n        this.setState({ step: newStep, breadcrumbsStep: mapBreadcrumbs(this.state.breadcrumbsStep, newStep-1) });\n    };\n\n    onPrevStep = () => {\n        const { step } = this.state;\n        const newStep = step-1;\n\n        this.setState({ step: newStep, breadcrumbsStep: mapBreadcrumbs(this.state.breadcrumbsStep, newStep-1) });\n    };\n\n    onValidation = validated => {\n        console.log(\"Validation on top hierarchy: \", validated);\n        this.setState({ disableControl: !validated });\n    };\n\n    // onBreadCrumbsClick = (currIndex) => {\n    //     this.setState({ breadcrumbsStep : mapBreadcrumbs(this.state.breadcrumbsStep, currIndex) });\n    // };\n\n    render() {\n        const { step, contactForm, addressForm, commentForm } = this.state;\n        let renderForm;\n\n        switch (step) {\n            case 1:\n                renderForm = (\n                    <ContactForm\n                        contact={contactForm}\n                        onChange={this.onChangeContactForm}\n                        onValidation={this.onValidation}\n                        step={step}\n                        onNextStep={this.onNextStep}\n                        onPrevStep={this.onPrevStep}\n                    />\n                );\n                break;\n            case 2:\n                renderForm = (\n                    <AddressForm\n                        address={addressForm}\n                        onChange={this.onChangeAddressForm}\n                        onValidation={this.onValidation}\n                        step={step}\n                        onNextStep={this.onNextStep}\n                        onPrevStep={this.onPrevStep}\n                    />\n                );\n                break;\n            // case 3:\n            //     renderForm = (\n            //         <CommentForm comment={commentForm} onChange={this.onChangeCommentForm} />\n            //     );\n            //     break;\n            case 3:\n                renderForm = (\n                    <ReviewForm\n                        {...this.state}\n                        onChangeContactForm={this.onChangeContactForm}\n                        onChangeAddressForm={this.onChangeAddressForm}\n                        onChangeCommentForm={this.onChangeCommentForm}\n                        onNextStep={this.onNextStep}\n                    />\n                );\n                break;\n            case 4:\n                renderForm = <ThankYouForm />;\n                break;\n        }\n\n        return (\n            <div className=\"App\">\n                <div className=\"div-form\">\n                    <div className=\"row\">\n                        <BreadCrumbs breadcrumbs={this.state.breadcrumbsStep} />\n                    </div>\n\n                    <br />\n                    {renderForm}\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapBreadcrumbs(breadcrumbs, currIndex) {\n    return breadcrumbs.map((x, idx) => {\n        x.active = currIndex >= idx;\n        return x;\n    });\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport M from 'materialize-css';\nimport FormikForm from './FormikForm';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}